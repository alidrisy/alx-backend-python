{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
		"name": "Messaging API",
		"description": "Collection for testing the Messaging API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000/api",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Registration successful\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('username');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"Test@123\",\n    \"password2\": \"Test@123\",\n    \"email\": \"testuser@example.com\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/register/",
							"host": ["{{base_url}}"],
							"path": ["register"]
						},
						"description": "Register a new user"
					}
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('access');",
									"    pm.expect(responseData).to.have.property('refresh');",
									"    ",
									"    // Save tokens to variables",
									"    pm.collectionVariables.set('access_token', responseData.access);",
									"    pm.collectionVariables.set('refresh_token', responseData.refresh);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"Test@123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/token/",
							"host": ["{{base_url}}"],
							"path": ["token"]
						},
						"description": "Login and get JWT tokens"
					}
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(205);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/logout/",
							"host": ["{{base_url}}"],
							"path": ["logout"]
						},
						"description": "Logout and blacklist refresh token"
					}
				}
			]
		},
		{
			"name": "Conversations",
			"item": [
				{
					"name": "Create Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Conversation created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('conversation_id');",
									"    ",
									"    // Save conversation ID for later use",
									"    pm.collectionVariables.set('conversation_id', responseData.conversation_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"participant_ids\": [\"recipient_user_id\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/conversations/",
							"host": ["{{base_url}}"],
							"path": ["conversations"]
						},
						"description": "Create a new conversation"
					}
				},
				{
					"name": "List Conversations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get conversations successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('results');",
									"    pm.expect(responseData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/conversations/",
							"host": ["{{base_url}}"],
							"path": ["conversations"],
							"query": [
								{
									"key": "participant",
									"value": "username",
									"description": "Filter by participant",
									"disabled": true
								},
								{
									"key": "created_at_after",
									"value": "2024-06-01",
									"description": "Filter by date after",
									"disabled": true
								}
							]
						},
						"description": "Get list of conversations"
					}
				}
			]
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "Send Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Message sent successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('content');",
									"    pm.expect(responseData).to.have.property('sender');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Hello, this is a test message!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/conversations/{{conversation_id}}/messages/",
							"host": ["{{base_url}}"],
							"path": ["conversations", "{{conversation_id}}", "messages"]
						},
						"description": "Send a new message in a conversation"
					}
				},
				{
					"name": "List Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get messages successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('results');",
									"    pm.expect(responseData).to.have.property('count');",
									"    pm.expect(responseData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/conversations/{{conversation_id}}/messages/",
							"host": ["{{base_url}}"],
							"path": ["conversations", "{{conversation_id}}", "messages"],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "sender",
									"value": "username",
									"description": "Filter by sender",
									"disabled": true
								},
								{
									"key": "created_at_after",
									"value": "2024-06-01",
									"description": "Filter by date after",
									"disabled": true
								}
							]
						},
						"description": "Get messages in a conversation with pagination"
					}
				},
				{
					"name": "Update Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Message updated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('content');",
									"    pm.expect(responseData.content).to.equal('Updated message content');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Updated message content\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/conversations/{{conversation_id}}/messages/{{message_id}}/",
							"host": ["{{base_url}}"],
							"path": ["conversations", "{{conversation_id}}", "messages", "{{message_id}}"]
						},
						"description": "Update a message (only by sender)"
					}
				},
				{
					"name": "Delete Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Message deleted successfully\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/conversations/{{conversation_id}}/messages/{{message_id}}/",
							"host": ["{{base_url}}"],
							"path": ["conversations", "{{conversation_id}}", "messages", "{{message_id}}"]
						},
						"description": "Delete a message (by sender or conversation participant)"
					}
				}
			]
		},
		{
			"name": "Unauthorized Tests",
			"item": [
				{
					"name": "Access Without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Access denied without token\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/conversations/",
							"host": ["{{base_url}}"],
							"path": ["conversations"]
						},
						"description": "Try to access protected endpoint without token"
					}
				},
				{
					"name": "Access Others Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Access denied to others conversation\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/conversations/999999/messages/",
							"host": ["{{base_url}}"],
							"path": ["conversations", "999999", "messages"]
						},
						"description": "Try to access conversation where user is not a participant"
					}
				}
			]
		}
	]
} 